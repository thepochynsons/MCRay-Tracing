project(mattausch)

cmake_minimum_required(VERSION 3.2.0)

# C++14 support
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fopenmp -std=c++14 -fpermissive")

# Sources
set (mattausch_SRC
        "src/main.cpp"
        "src/mesh.h"
        "src/scene.cpp"
        "src/objloader.h"
        "src/ray.cpp"
        "src/rfimage.h"
        "src/psf.h"
        "src/transducer.h"
        "src/volume.h"
        "src/random.h"
        "src/wavefront/tiny_obj_loader.cpp"
        "cuda/material.cu"
        "cuda/material.h")

add_executable(mattausch ${mattausch_SRC})

find_package(CUDA 5.0 REQUIRED)

# Bullet includes
set(BULLET_SRC_DIR "" CACHE PATH "")
set(BULLET_LIB_DIR "" CACHE PATH "")
message("Bullet source directory: ${BULLET_SRC_DIR}")
message("Bullet lib directory: ${BULLET_LIB_DIR}")
include_directories(${BULLET_SRC_DIR})

target_link_libraries(mattausch
    ${BULLET_LIB_DIR}/libBullet3Common.a
    ${BULLET_LIB_DIR}/libBulletDynamics.a
    ${BULLET_LIB_DIR}/libBulletCollision.a
    ${BULLET_LIB_DIR}/libLinearMath.a
    )

# OpenCV
find_package(OpenCV REQUIRED)
if (OpenCV_FOUND)
  target_link_libraries(mattausch ${OpenCV_LIBS})
endif()

# OptiX
set (CMAKE_MODULE_PATH "/home/santiago/Proyectos/MCRay-Tracing/")
set(OptiX_INSTALL_DIR "" CACHE PATH "Path to OptiX installed location.")
# Search for the OptiX libraries and include files.
find_package(OptiX REQUIRED)
# Add the path to the OptiX headers to our include paths.
include_directories(
  "${OptiX_INCLUDE}"
  "cuda"
  )


# Include other stuff, like Units

#SUTIL
set(SAMPLES_PTX_DIR "${CMAKE_BINARY_DIR}/lib/ptx")
set(SAMPLES_DIR "${CMAKE_CURRENT_SOURCE_DIR}")

set(CUDA_GENERATED_OUTPUT_DIR ${SAMPLES_PTX_DIR})

if (WIN32)
  string(REPLACE "/" "\\\\" SAMPLES_PTX_DIR ${SAMPLES_PTX_DIR})
else (WIN32)
  if ( USING_GNU_C AND NOT APPLE)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DM_PI=3.14159265358979323846" )
  endif()
endif (WIN32)

# NVRTC include paths relative to the sample path
set(SAMPLES_RELATIVE_INCLUDE_DIRS "\\
  \"include/sutil\", \\
  \"/cuda\", ")
# NVRTC absolute include paths to the headers used to build the samples
set(SAMPLES_ABSOLUTE_INCLUDE_DIRS "\\
  \"${OptiX_INCLUDE}\", \\
  \"${OptiX_INCLUDE}/optixu\", \\
  \"${CMAKE_CURRENT_SOURCE_DIR}/support/mdl-sdk/include\", \\
  \"${CUDA_INCLUDE_DIRS}\", ")

# Build a null-terminated option list for NVRTC
set(CUDA_NVRTC_OPTIONS)
foreach(flag ${CUDA_NVRTC_FLAGS})
  set(CUDA_NVRTC_OPTIONS "${CUDA_NVRTC_OPTIONS} \\\n  \"${flag}\",")
endforeach()
set(CUDA_NVRTC_OPTIONS "${CUDA_NVRTC_OPTIONS} \\\n  0,")

configure_file(${CMAKE_CURRENT_SOURCE_DIR}/sampleConfig.h.in ${CMAKE_CURRENT_BINARY_DIR}/sampleConfig.h @ONLY)

# Path to sutil.h that all the samples need
include_directories( ${CMAKE_SOURCE_DIR}/include/sutil
                     ${CMAKE_SOURCE_DIR}
                     ${OptiX_INCLUDE}/optixu
                     ${CMAKE_SOURCE_DIR}/include/support/mdl-sdk/include
                     ${CMAKE_SOURCE_DIR}
                     ${CUDA_INCLUDE_DIRS} )

include(FindSUtilGLUT)

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/support/mdl-sdk/include/mi/mdl_sdk.h)
  # The MDL_SDK wrapper library can only be built when the MDL SDK is available
  add_subdirectory(mdl_wrapper)
  set(USE_OWN_MDL_WRAPPER TRUE)
else()
  include(FindMDLWrapper)
endif()

set(SAMPLES_CUDA_DIR ${CMAKE_CURRENT_SOURCE_DIR}/cuda)

include_directories("${CMAKE_SOURCE_DIR}/include")

add_subdirectory(include/sutil)

